{
	// Place your Competitive_Programming_Template_Rust workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"gcd": {
		"prefix": "gcd",
		"body": [
			"fn ${1:gcd}<T>(a: T, b: T) -> T",
			"where",
			"T: std::ops::Add<Output = T> + std::ops::Rem<Output = T> + std::ops::Div<Output = T> + std::cmp::PartialEq + Copy,",
			"{",
			"if b + b == b {",
			"return a;",
			"}",
			"${1:gcd}(b, a % b)",
			"}",
			"",
		]
	},
	"lcm": {
		"prefix": "lcm",
		"body": "($1 / ${3:gcd}($1, $2)) * $2;"
	},
	"modpow": {
		"prefix": "modpow",
		"body": [
			"fn modpow(mut s: ${1:usize}, mut n: $1, p: $1) -> $1 {",
			"if p == 0 {",
			"return 1;",
			"}",
			"let mut t = s;",
			"s = 1;",
			"while n > 0 {",
			"if n & 1 != 0 {",
			"s *= t;",
			"s %= p;",
			"}",
			"n >>= 1;",
			"t *= t;",
			"t %= p;",
			"}",
			"s",
			"}",
		]
	}
}