var N=null,E="",T="t",U="u",searchIndex={};
var R=["cp_template","modint","usize","option","cp_template::modint","string","result","try_from","try_into","borrow_mut","cp_template::prime_number","type_id","formatter","DPFactorial","PrimeFactorization"];

searchIndex["cp_template"]={"doc":E,"i":[[0,"input",R[0],"標準入力の簡易入力関数モジュール",N,N],[5,"input_line_str","cp_template::input","文字列を一行読み込む # Example ```ignore use cp_template::*;",N,[[],[R[5]]]],[5,"p",E,"一つの変数を出力する。 ``` use cp_template::*;",N,[[[T]]]],[5,"input_vector2d",E,"指定した行数を読み込み、二次元配列に変換する。 # Examples ```ignore use…",N,[[[R[2]]],[["vec"],["vec",["vec"]]]]],[5,"input_vector",E,"一行読み込み、配列(Vec)に変換する。 # Examples ```ignore use…",N,[[],["vec"]]],[5,"str2vec",E,"String(str)を配列(Vec)に変換する。 # Examples ```ignore use…",N,[[["str"]],[["char"],["vec",["char"]]]]],[0,R[1],R[0],"任意の素数を法とする変数",N,N],[3,"Modint",R[4],E,N,N],[3,R[13],E,E,N,N],[11,"new",E,E,0,[[[R[2]]],[R[1]]]],[11,"from",E,E,0,[[[R[2]]],[R[1]]]],[11,"add_uint",E,E,0,[[["self"],[R[2]]],["self"]]],[11,"sub_uint",E,E,0,[[["self"],[R[2]]],["self"]]],[11,"mul_uint",E,E,0,[[["self"],[R[2]]],["self"]]],[11,"div_uint",E,E,0,[[["self"],[R[2]]],["self"]]],[11,"inv",E,E,0,[[["self"]],["self"]]],[11,"pow",E,E,0,[[["self"],[R[2]]],["self"]]],[11,"get_value",E,E,0,[[["self"]],[R[2]]]],[11,"new",E,E,1,[[[R[2]]],["dpfactorial"]]],[11,"get_factorial",E,E,1,[[["self"],[R[2]]],[R[1]]]],[11,"get_factorial_inv",E,E,1,[[["self"],[R[2]]],[R[1]]]],[11,"get_combination",E,E,1,[[["self"],[R[2]]],[R[1]]]],[11,"get_permutation",E,E,1,[[["self"],[R[2]]],[R[1]]]],[0,"prime_number",R[0],"素数関係のライブラリ",N,N],[3,R[14],R[10],E,N,N],[11,"calc",E,"素因数を計算するイテレータを返す。",2,[[[R[2]]],["primefactorization"]]],[0,"graph",R[0],"グラフ関係のライブラリ",N,N],[5,"bellman_ford","cp_template::graph","最短経路計算(ベルマンフォード法)",N,[[["vec"],["vec"]],["bool"]]],[5,"dijkstra",E,"最短経路計算(ダイクストラ法)",N,[[["vec"],[R[2]]],[[R[3],["isize"]],["vec",[R[3]]]]]],[5,"warshall_floyd",E,"最短経路計算(ワーシャルフロイド法)",N,[[["vec"]]]],[14,"input",R[0],"空白で区切られた複数の値の読み込む。 # Example ```ignore use cp_template::*;",N,N],[11,"to_string",R[4],E,0,[[["self"]],[R[5]]]],[11,"from",E,E,0,[[[T]],[T]]],[11,"into",E,E,0,[[],[U]]],[11,"to_owned",E,E,0,[[["self"]],[T]]],[11,"clone_into",E,E,0,[[[T],["self"]]]],[11,R[7],E,E,0,[[[U]],[R[6]]]],[11,R[8],E,E,0,[[],[R[6]]]],[11,R[9],E,E,0,[[["self"]],[T]]],[11,"borrow",E,E,0,[[["self"]],[T]]],[11,R[11],E,E,0,[[["self"]],["typeid"]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[],[U]]],[11,R[7],E,E,1,[[[U]],[R[6]]]],[11,R[8],E,E,1,[[],[R[6]]]],[11,R[9],E,E,1,[[["self"]],[T]]],[11,"borrow",E,E,1,[[["self"]],[T]]],[11,R[11],E,E,1,[[["self"]],["typeid"]]],[11,"from",R[10],E,2,[[[T]],[T]]],[11,"into",E,E,2,[[],[U]]],[11,"into_iter",E,E,2,[[],["i"]]],[11,R[7],E,E,2,[[[U]],[R[6]]]],[11,R[8],E,E,2,[[],[R[6]]]],[11,R[9],E,E,2,[[["self"]],[T]]],[11,"borrow",E,E,2,[[["self"]],[T]]],[11,R[11],E,E,2,[[["self"]],["typeid"]]],[11,"next",E,E,2,[[["self"]],[R[3]]]],[11,"clone",R[4],E,0,[[["self"]],[R[1]]]],[11,"eq",E,E,0,[[["self"],[R[1]]],["bool"]]],[11,"ne",E,E,0,[[["self"],[R[1]]],["bool"]]],[11,"fmt",E,E,0,[[["self"],[R[12]]],[R[6]]]],[11,"fmt",E,E,0,[[["self"],[R[12]]],[R[6]]]],[11,"from_str",E,E,0,[[["str"]],[R[6]]]]],"p":[[3,"Modint"],[3,R[13]],[3,R[14]]]};
initSearch(searchIndex);addSearchOptions(searchIndex);