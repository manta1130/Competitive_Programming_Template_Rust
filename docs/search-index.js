var N=null,E="",T="t",U="u",searchIndex={};
var R=["cp_template","modint","usize","option","cp_template::modint","string","result","try_from","borrow","type_id","borrow_mut","try_into","cp_template::prime_number","formatter","DPFactorial","PrimeFactorization","標準入力の簡易入力関数モジュール","input_line_str","cp_template::input","文字列を一行読み込む # Example ```ignore use cp_template::*;","一つの変数を出力する。 ``` use cp_template::*;","input_vector2d","指定した行数を読み込み、二次元配列に変換する。 # Examples ```ignore use…","input_vector","一行読み込み、配列(Vec)に変換する。 # Examples ```ignore use…","String(str)を配列(Vec)に変換する。 # Examples ```ignore use…","任意の素数を法とする変数","add_uint","sub_uint","mul_uint","div_uint","get_value","dpfactorial","get_factorial","get_factorial_inv","get_combination","get_permutation","prime_number","素数関係のライブラリ","素因数を計算するイテレータを返す。","primefactorization","グラフ関係のライブラリ","bellman_ford","cp_template::graph","dijkstra","warshall_floyd","ワーシャルフロイド法","空白で区切られた複数の値の読み込む。 # Example ```ignore use cp_template::*;","to_owned","clone_into","to_string","typeid","into_iter","from_str","str2vec","Modint","ベルマンフォード法","ダイクストラ法","最短経路計算(ベルマンフォード法)","最短経路計算(ダイクストラ法)","最短経路計算(ワーシャルフロイド法)"];
searchIndex[R[0]]={"doc":E,"i":[[0,"input",R[0],R[16],N,N],[5,R[17],R[18],R[19],N,[[],[R[5]]]],[5,"p",E,R[20],N,[[[T]]]],[5,R[21],E,R[22],N,[[[R[2]]],[["vec"],["vec",["vec"]]]]],[5,R[23],E,R[24],N,[[],["vec"]]],[5,R[54],E,R[25],N,[[["str"]],[["char"],["vec",["char"]]]]],[0,R[1],R[0],R[26],N,N],[3,R[55],R[4],E,N,N],[3,R[14],E,E,N,N],[11,"new",E,E,0,[[[R[2]]],[R[1]]]],[11,"from",E,E,0,[[[R[2]]],[R[1]]]],[11,R[27],E,E,0,[[["self"],[R[2]]],["self"]]],[11,R[28],E,E,0,[[["self"],[R[2]]],["self"]]],[11,R[29],E,E,0,[[["self"],[R[2]]],["self"]]],[11,R[30],E,E,0,[[["self"],[R[2]]],["self"]]],[11,"inv",E,E,0,[[["self"]],["self"]]],[11,"pow",E,E,0,[[["self"],[R[2]]],["self"]]],[11,R[31],E,E,0,[[["self"]],[R[2]]]],[11,"new",E,E,1,[[[R[2]]],[R[32]]]],[11,R[33],E,E,1,[[["self"],[R[2]]],[R[1]]]],[11,R[34],E,E,1,[[["self"],[R[2]]],[R[1]]]],[11,R[35],E,E,1,[[["self"],[R[2]]],[R[1]]]],[11,R[36],E,E,1,[[["self"],[R[2]]],[R[1]]]],[0,R[37],R[0],R[38],N,N],[3,R[15],R[12],E,N,N],[11,"calc",E,R[39],2,[[[R[2]]],[R[40]]]],[0,"graph",R[0],R[41],N,N],[5,R[42],R[43],R[58],N,[[["vec"],["vec"]],["bool"]]],[5,R[44],E,R[59],N,[[[R[2]],["vec"]],[[R[3],["isize"]],["vec",[R[3]]]]]],[5,R[45],E,R[60],N,[[["vec"]]]],[0,"math",R[0],"数学関係のライブラリ",N,N],[5,"gcd","cp_template::math","最大公約数を求める。",N,[[[T]],[T]]],[5,"lcm",E,"最小公倍数を求める。",N,[[[T]],[T]]],[0,"vectools",R[0],"配列に関する補助関数ライブラリ",N,N],[5,"upper_bound","cp_template::vectools","C++のupper_boundと同等の実装",N,[[["vec"],[T]],[R[2]]]],[5,"lower_bound",E,"C++のlower_boundと同等の実装",N,[[["vec"],[T]],[R[2]]]],[5,"next_permutation",E,"次の順列を求める。",N,[[["vec"]],["bool"]]],[14,"input",R[0],R[47],N,N],[11,"from",R[4],E,0,[[[T]],[T]]],[11,"into",E,E,0,[[],[U]]],[11,R[48],E,E,0,[[["self"]],[T]]],[11,R[49],E,E,0,[[[T],["self"]]]],[11,R[50],E,E,0,[[["self"]],[R[5]]]],[11,R[7],E,E,0,[[[U]],[R[6]]]],[11,R[8],E,E,0,[[["self"]],[T]]],[11,R[9],E,E,0,[[["self"]],[R[51]]]],[11,R[10],E,E,0,[[["self"]],[T]]],[11,R[11],E,E,0,[[],[R[6]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[],[U]]],[11,R[7],E,E,1,[[[U]],[R[6]]]],[11,R[8],E,E,1,[[["self"]],[T]]],[11,R[9],E,E,1,[[["self"]],[R[51]]]],[11,R[10],E,E,1,[[["self"]],[T]]],[11,R[11],E,E,1,[[],[R[6]]]],[11,"from",R[12],E,2,[[[T]],[T]]],[11,R[52],E,E,2,[[],["i"]]],[11,"into",E,E,2,[[],[U]]],[11,R[7],E,E,2,[[[U]],[R[6]]]],[11,R[8],E,E,2,[[["self"]],[T]]],[11,R[9],E,E,2,[[["self"]],[R[51]]]],[11,R[10],E,E,2,[[["self"]],[T]]],[11,R[11],E,E,2,[[],[R[6]]]],[11,"eq",R[4],E,0,[[["self"],[R[1]]],["bool"]]],[11,"ne",E,E,0,[[["self"],[R[1]]],["bool"]]],[11,"clone",E,E,0,[[["self"]],[R[1]]]],[11,"next",R[12],E,2,[[["self"]],[R[3]]]],[11,"fmt",R[4],E,0,[[[R[13]],["self"]],[R[6]]]],[11,"fmt",E,E,0,[[[R[13]],["self"]],[R[6]]]],[11,R[53],E,E,0,[[["str"]],[R[6]]]]],"p":[[3,R[55]],[3,R[14]],[3,R[15]]]};
searchIndex[R[0]]={"doc":E,"i":[[0,"input",R[0],R[16],N,N],[5,R[17],R[18],R[19],N,[[],[R[5]]]],[5,"p",E,R[20],N,[[[T]]]],[5,R[21],E,R[22],N,[[[R[2]]],[["vec"],["vec",["vec"]]]]],[5,R[23],E,R[24],N,[[],["vec"]]],[5,R[54],E,R[25],N,[[["str"]],[["char"],["vec",["char"]]]]],[0,R[1],R[0],R[26],N,N],[3,R[55],R[4],E,N,N],[3,R[14],E,E,N,N],[11,"new",E,E,0,[[[R[2]]],[R[1]]]],[11,"from",E,E,0,[[[R[2]]],[R[1]]]],[11,R[27],E,E,0,[[["self"],[R[2]]],["self"]]],[11,R[28],E,E,0,[[["self"],[R[2]]],["self"]]],[11,R[29],E,E,0,[[["self"],[R[2]]],["self"]]],[11,R[30],E,E,0,[[["self"],[R[2]]],["self"]]],[11,"inv",E,E,0,[[["self"]],["self"]]],[11,"pow",E,E,0,[[["self"],[R[2]]],["self"]]],[11,R[31],E,E,0,[[["self"]],[R[2]]]],[11,"new",E,E,1,[[[R[2]]],[R[32]]]],[11,R[33],E,E,1,[[["self"],[R[2]]],[R[1]]]],[11,R[34],E,E,1,[[["self"],[R[2]]],[R[1]]]],[11,R[35],E,E,1,[[["self"],[R[2]]],[R[1]]]],[11,R[36],E,E,1,[[["self"],[R[2]]],[R[1]]]],[0,R[37],R[0],R[38],N,N],[3,R[15],R[12],E,N,N],[11,"calc",E,R[39],2,[[[R[2]]],[R[40]]]],[0,"graph",R[0],R[41],N,N],[5,R[42],R[43],"ベルマンフォード法 戻り値がtrueなら負の閉路がある。 graph:グラフ情報(隣接リスト)…",N,[[["vec"],["vec"]],["bool"]]],[5,R[44],E,"ダイクストラ法 最短経路が格納された配列を返す。 graph:グラフ情報(隣接リスト) start:始点",N,[[[R[2]],["vec"]],[[R[3],["isize"]],["vec",[R[3]]]]]],[5,R[45],E,R[46],N,[[["vec"]]]],[14,"input",R[0],R[47],N,N],[11,"from",R[4],E,0,[[[T]],[T]]],[11,"into",E,E,0,[[],[U]]],[11,R[48],E,E,0,[[["self"]],[T]]],[11,R[49],E,E,0,[[[T],["self"]]]],[11,R[50],E,E,0,[[["self"]],[R[5]]]],[11,R[7],E,E,0,[[[U]],[R[6]]]],[11,R[8],E,E,0,[[["self"]],[T]]],[11,R[9],E,E,0,[[["self"]],[R[51]]]],[11,R[10],E,E,0,[[["self"]],[T]]],[11,R[11],E,E,0,[[],[R[6]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[],[U]]],[11,R[7],E,E,1,[[[U]],[R[6]]]],[11,R[8],E,E,1,[[["self"]],[T]]],[11,R[9],E,E,1,[[["self"]],[R[51]]]],[11,R[10],E,E,1,[[["self"]],[T]]],[11,R[11],E,E,1,[[],[R[6]]]],[11,"from",R[12],E,2,[[[T]],[T]]],[11,R[52],E,E,2,[[],["i"]]],[11,"into",E,E,2,[[],[U]]],[11,R[7],E,E,2,[[[U]],[R[6]]]],[11,R[8],E,E,2,[[["self"]],[T]]],[11,R[9],E,E,2,[[["self"]],[R[51]]]],[11,R[10],E,E,2,[[["self"]],[T]]],[11,R[11],E,E,2,[[],[R[6]]]],[11,"eq",R[4],E,0,[[[R[1]],["self"]],["bool"]]],[11,"ne",E,E,0,[[[R[1]],["self"]],["bool"]]],[11,"clone",E,E,0,[[["self"]],[R[1]]]],[11,"next",R[12],E,2,[[["self"]],[R[3]]]],[11,"fmt",R[4],E,0,[[[R[13]],["self"]],[R[6]]]],[11,"fmt",E,E,0,[[[R[13]],["self"]],[R[6]]]],[11,R[53],E,E,0,[[["str"]],[R[6]]]]],"p":[[3,R[55]],[3,R[14]],[3,R[15]]]};
searchIndex[R[0]]={"doc":E,"i":[[0,"input",R[0],R[16],N,N],[5,R[17],R[18],R[19],N,[[],[R[5]]]],[5,"p",E,R[20],N,[[[T]]]],[5,R[21],E,R[22],N,[[[R[2]]],[["vec"],["vec",["vec"]]]]],[5,R[23],E,R[24],N,[[],["vec"]]],[5,R[54],E,R[25],N,[[["str"]],[["char"],["vec",["char"]]]]],[0,R[1],R[0],R[26],N,N],[3,R[55],R[4],E,N,N],[3,R[14],E,E,N,N],[11,"new",E,E,0,[[[R[2]]],[R[1]]]],[11,"from",E,E,0,[[[R[2]]],[R[1]]]],[11,R[27],E,E,0,[[["self"],[R[2]]],["self"]]],[11,R[28],E,E,0,[[["self"],[R[2]]],["self"]]],[11,R[29],E,E,0,[[["self"],[R[2]]],["self"]]],[11,R[30],E,E,0,[[["self"],[R[2]]],["self"]]],[11,"inv",E,E,0,[[["self"]],["self"]]],[11,"pow",E,E,0,[[["self"],[R[2]]],["self"]]],[11,R[31],E,E,0,[[["self"]],[R[2]]]],[11,"new",E,E,1,[[[R[2]]],[R[32]]]],[11,R[33],E,E,1,[[["self"],[R[2]]],[R[1]]]],[11,R[34],E,E,1,[[["self"],[R[2]]],[R[1]]]],[11,R[35],E,E,1,[[["self"],[R[2]]],[R[1]]]],[11,R[36],E,E,1,[[["self"],[R[2]]],[R[1]]]],[0,R[37],R[0],R[38],N,N],[3,R[15],R[12],E,N,N],[11,"calc",E,R[39],2,[[[R[2]]],[R[40]]]],[0,"graph",R[0],R[41],N,N],[5,R[42],R[43],R[56],N,[[["vec"],["vec"]],["bool"]]],[5,R[44],E,R[57],N,[[[R[2]],["vec"]],[[R[3],["isize"]],["vec",[R[3]]]]]],[5,R[45],E,R[46],N,[[["vec"]]]],[14,"input",R[0],R[47],N,N],[11,"from",R[4],E,0,[[[T]],[T]]],[11,"into",E,E,0,[[],[U]]],[11,R[48],E,E,0,[[["self"]],[T]]],[11,R[49],E,E,0,[[[T],["self"]]]],[11,R[50],E,E,0,[[["self"]],[R[5]]]],[11,R[7],E,E,0,[[[U]],[R[6]]]],[11,R[8],E,E,0,[[["self"]],[T]]],[11,R[9],E,E,0,[[["self"]],[R[51]]]],[11,R[10],E,E,0,[[["self"]],[T]]],[11,R[11],E,E,0,[[],[R[6]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[],[U]]],[11,R[7],E,E,1,[[[U]],[R[6]]]],[11,R[8],E,E,1,[[["self"]],[T]]],[11,R[9],E,E,1,[[["self"]],[R[51]]]],[11,R[10],E,E,1,[[["self"]],[T]]],[11,R[11],E,E,1,[[],[R[6]]]],[11,"from",R[12],E,2,[[[T]],[T]]],[11,R[52],E,E,2,[[],["i"]]],[11,"into",E,E,2,[[],[U]]],[11,R[7],E,E,2,[[[U]],[R[6]]]],[11,R[8],E,E,2,[[["self"]],[T]]],[11,R[9],E,E,2,[[["self"]],[R[51]]]],[11,R[10],E,E,2,[[["self"]],[T]]],[11,R[11],E,E,2,[[],[R[6]]]],[11,"eq",R[4],E,0,[[[R[1]],["self"]],["bool"]]],[11,"ne",E,E,0,[[[R[1]],["self"]],["bool"]]],[11,"clone",E,E,0,[[["self"]],[R[1]]]],[11,"next",R[12],E,2,[[["self"]],[R[3]]]],[11,"fmt",R[4],E,0,[[[R[13]],["self"]],[R[6]]]],[11,"fmt",E,E,0,[[[R[13]],["self"]],[R[6]]]],[11,R[53],E,E,0,[[["str"]],[R[6]]]]],"p":[[3,R[55]],[3,R[14]],[3,R[15]]]};
searchIndex[R[0]]={"doc":E,"i":[[0,"input",R[0],R[16],N,N],[5,R[17],R[18],R[19],N,[[],[R[5]]]],[5,"p",E,R[20],N,[[[T]]]],[5,R[21],E,R[22],N,[[[R[2]]],[["vec"],["vec",["vec"]]]]],[5,R[23],E,R[24],N,[[],["vec"]]],[5,R[54],E,R[25],N,[[["str"]],[["char"],["vec",["char"]]]]],[0,R[1],R[0],R[26],N,N],[3,R[55],R[4],E,N,N],[3,R[14],E,E,N,N],[11,"new",E,E,0,[[[R[2]]],[R[1]]]],[11,"from",E,E,0,[[[R[2]]],[R[1]]]],[11,R[27],E,E,0,[[["self"],[R[2]]],["self"]]],[11,R[28],E,E,0,[[["self"],[R[2]]],["self"]]],[11,R[29],E,E,0,[[["self"],[R[2]]],["self"]]],[11,R[30],E,E,0,[[["self"],[R[2]]],["self"]]],[11,"inv",E,E,0,[[["self"]],["self"]]],[11,"pow",E,E,0,[[["self"],[R[2]]],["self"]]],[11,R[31],E,E,0,[[["self"]],[R[2]]]],[11,"new",E,E,1,[[[R[2]]],[R[32]]]],[11,R[33],E,E,1,[[["self"],[R[2]]],[R[1]]]],[11,R[34],E,E,1,[[["self"],[R[2]]],[R[1]]]],[11,R[35],E,E,1,[[["self"],[R[2]]],[R[1]]]],[11,R[36],E,E,1,[[["self"],[R[2]]],[R[1]]]],[0,R[37],R[0],R[38],N,N],[3,R[15],R[12],E,N,N],[11,"calc",E,R[39],2,[[[R[2]]],[R[40]]]],[0,"graph",R[0],R[41],N,N],[5,R[42],R[43],R[56],N,[[["vec"],["vec"]],["bool"]]],[5,R[44],E,R[57],N,[[[R[2]],["vec"]],[[R[3],["isize"]],["vec",[R[3]]]]]],[5,R[45],E,R[46],N,[[["vec"]]]],[14,"input",R[0],R[47],N,N],[11,"from",R[4],E,0,[[[T]],[T]]],[11,"into",E,E,0,[[],[U]]],[11,R[48],E,E,0,[[["self"]],[T]]],[11,R[49],E,E,0,[[[T],["self"]]]],[11,R[50],E,E,0,[[["self"]],[R[5]]]],[11,R[7],E,E,0,[[[U]],[R[6]]]],[11,R[8],E,E,0,[[["self"]],[T]]],[11,R[9],E,E,0,[[["self"]],[R[51]]]],[11,R[10],E,E,0,[[["self"]],[T]]],[11,R[11],E,E,0,[[],[R[6]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[],[U]]],[11,R[7],E,E,1,[[[U]],[R[6]]]],[11,R[8],E,E,1,[[["self"]],[T]]],[11,R[9],E,E,1,[[["self"]],[R[51]]]],[11,R[10],E,E,1,[[["self"]],[T]]],[11,R[11],E,E,1,[[],[R[6]]]],[11,"from",R[12],E,2,[[[T]],[T]]],[11,R[52],E,E,2,[[],["i"]]],[11,"into",E,E,2,[[],[U]]],[11,R[7],E,E,2,[[[U]],[R[6]]]],[11,R[8],E,E,2,[[["self"]],[T]]],[11,R[9],E,E,2,[[["self"]],[R[51]]]],[11,R[10],E,E,2,[[["self"]],[T]]],[11,R[11],E,E,2,[[],[R[6]]]],[11,"eq",R[4],E,0,[[[R[1]],["self"]],["bool"]]],[11,"ne",E,E,0,[[[R[1]],["self"]],["bool"]]],[11,"clone",E,E,0,[[["self"]],[R[1]]]],[11,"next",R[12],E,2,[[["self"]],[R[3]]]],[11,"fmt",R[4],E,0,[[[R[13]],["self"]],[R[6]]]],[11,"fmt",E,E,0,[[[R[13]],["self"]],[R[6]]]],[11,R[53],E,E,0,[[["str"]],[R[6]]]]],"p":[[3,R[55]],[3,R[14]],[3,R[15]]]};
searchIndex[R[0]]={"doc":E,"i":[[0,"input",R[0],R[16],N,N],[5,R[17],R[18],R[19],N,[[],[R[5]]]],[5,"p",E,R[20],N,[[[T]]]],[5,R[21],E,R[22],N,[[[R[2]]],[["vec"],["vec",["vec"]]]]],[5,R[23],E,R[24],N,[[],["vec"]]],[5,R[54],E,R[25],N,[[["str"]],[["char"],["vec",["char"]]]]],[0,R[1],R[0],R[26],N,N],[3,R[55],R[4],E,N,N],[3,R[14],E,E,N,N],[11,"new",E,E,0,[[[R[2]]],[R[1]]]],[11,"from",E,E,0,[[[R[2]]],[R[1]]]],[11,R[27],E,E,0,[[["self"],[R[2]]],["self"]]],[11,R[28],E,E,0,[[["self"],[R[2]]],["self"]]],[11,R[29],E,E,0,[[["self"],[R[2]]],["self"]]],[11,R[30],E,E,0,[[["self"],[R[2]]],["self"]]],[11,"inv",E,E,0,[[["self"]],["self"]]],[11,"pow",E,E,0,[[["self"],[R[2]]],["self"]]],[11,R[31],E,E,0,[[["self"]],[R[2]]]],[11,"new",E,E,1,[[[R[2]]],[R[32]]]],[11,R[33],E,E,1,[[["self"],[R[2]]],[R[1]]]],[11,R[34],E,E,1,[[["self"],[R[2]]],[R[1]]]],[11,R[35],E,E,1,[[["self"],[R[2]]],[R[1]]]],[11,R[36],E,E,1,[[["self"],[R[2]]],[R[1]]]],[0,R[37],R[0],R[38],N,N],[3,R[15],R[12],E,N,N],[11,"calc",E,R[39],2,[[[R[2]]],[R[40]]]],[0,"graph",R[0],R[41],N,N],[5,R[42],R[43],R[58],N,[[["vec"],["vec"]],["bool"]]],[5,R[44],E,R[59],N,[[[R[2]],["vec"]],[[R[3],["isize"]],["vec",[R[3]]]]]],[5,R[45],E,R[60],N,[[["vec"]]]],[14,"input",R[0],R[47],N,N],[11,"from",R[4],E,0,[[[T]],[T]]],[11,"into",E,E,0,[[],[U]]],[11,R[48],E,E,0,[[["self"]],[T]]],[11,R[49],E,E,0,[[[T],["self"]]]],[11,R[50],E,E,0,[[["self"]],[R[5]]]],[11,R[7],E,E,0,[[[U]],[R[6]]]],[11,R[8],E,E,0,[[["self"]],[T]]],[11,R[9],E,E,0,[[["self"]],[R[51]]]],[11,R[10],E,E,0,[[["self"]],[T]]],[11,R[11],E,E,0,[[],[R[6]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[],[U]]],[11,R[7],E,E,1,[[[U]],[R[6]]]],[11,R[8],E,E,1,[[["self"]],[T]]],[11,R[9],E,E,1,[[["self"]],[R[51]]]],[11,R[10],E,E,1,[[["self"]],[T]]],[11,R[11],E,E,1,[[],[R[6]]]],[11,"from",R[12],E,2,[[[T]],[T]]],[11,R[52],E,E,2,[[],["i"]]],[11,"into",E,E,2,[[],[U]]],[11,R[7],E,E,2,[[[U]],[R[6]]]],[11,R[8],E,E,2,[[["self"]],[T]]],[11,R[9],E,E,2,[[["self"]],[R[51]]]],[11,R[10],E,E,2,[[["self"]],[T]]],[11,R[11],E,E,2,[[],[R[6]]]],[11,"eq",R[4],E,0,[[[R[1]],["self"]],["bool"]]],[11,"ne",E,E,0,[[[R[1]],["self"]],["bool"]]],[11,"clone",E,E,0,[[["self"]],[R[1]]]],[11,"next",R[12],E,2,[[["self"]],[R[3]]]],[11,"fmt",R[4],E,0,[[[R[13]],["self"]],[R[6]]]],[11,"fmt",E,E,0,[[[R[13]],["self"]],[R[6]]]],[11,R[53],E,E,0,[[["str"]],[R[6]]]]],"p":[[3,R[55]],[3,R[14]],[3,R[15]]]};
searchIndex[R[0]]={"doc":E,"i":[[0,"input",R[0],R[16],N,N],[5,R[17],R[18],R[19],N,[[],[R[5]]]],[5,"p",E,R[20],N,[[[T]]]],[5,R[21],E,R[22],N,[[[R[2]]],[["vec"],["vec",["vec"]]]]],[5,R[23],E,R[24],N,[[],["vec"]]],[5,R[54],E,R[25],N,[[["str"]],[["char"],["vec",["char"]]]]],[0,R[1],R[0],R[26],N,N],[3,R[55],R[4],E,N,N],[3,R[14],E,E,N,N],[11,"new",E,E,0,[[[R[2]]],[R[1]]]],[11,"from",E,E,0,[[[R[2]]],[R[1]]]],[11,R[27],E,E,0,[[["self"],[R[2]]],["self"]]],[11,R[28],E,E,0,[[["self"],[R[2]]],["self"]]],[11,R[29],E,E,0,[[["self"],[R[2]]],["self"]]],[11,R[30],E,E,0,[[["self"],[R[2]]],["self"]]],[11,"inv",E,E,0,[[["self"]],["self"]]],[11,"pow",E,E,0,[[["self"],[R[2]]],["self"]]],[11,R[31],E,E,0,[[["self"]],[R[2]]]],[11,"new",E,E,1,[[[R[2]]],[R[32]]]],[11,R[33],E,E,1,[[["self"],[R[2]]],[R[1]]]],[11,R[34],E,E,1,[[["self"],[R[2]]],[R[1]]]],[11,R[35],E,E,1,[[["self"],[R[2]]],[R[1]]]],[11,R[36],E,E,1,[[["self"],[R[2]]],[R[1]]]],[0,R[37],R[0],R[38],N,N],[3,R[15],R[12],E,N,N],[11,"calc",E,R[39],2,[[[R[2]]],[R[40]]]],[0,"graph",R[0],R[41],N,N],[5,R[42],R[43],R[58],N,[[["vec"],["vec"]],["bool"]]],[5,R[44],E,R[59],N,[[[R[2]],["vec"]],[[R[3],["isize"]],["vec",[R[3]]]]]],[5,R[45],E,R[60],N,[[["vec"]]]],[14,"input",R[0],R[47],N,N],[11,"from",R[4],E,0,[[[T]],[T]]],[11,"into",E,E,0,[[],[U]]],[11,R[48],E,E,0,[[["self"]],[T]]],[11,R[49],E,E,0,[[[T],["self"]]]],[11,R[50],E,E,0,[[["self"]],[R[5]]]],[11,R[7],E,E,0,[[[U]],[R[6]]]],[11,R[8],E,E,0,[[["self"]],[T]]],[11,R[9],E,E,0,[[["self"]],[R[51]]]],[11,R[10],E,E,0,[[["self"]],[T]]],[11,R[11],E,E,0,[[],[R[6]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[],[U]]],[11,R[7],E,E,1,[[[U]],[R[6]]]],[11,R[8],E,E,1,[[["self"]],[T]]],[11,R[9],E,E,1,[[["self"]],[R[51]]]],[11,R[10],E,E,1,[[["self"]],[T]]],[11,R[11],E,E,1,[[],[R[6]]]],[11,"from",R[12],E,2,[[[T]],[T]]],[11,R[52],E,E,2,[[],["i"]]],[11,"into",E,E,2,[[],[U]]],[11,R[7],E,E,2,[[[U]],[R[6]]]],[11,R[8],E,E,2,[[["self"]],[T]]],[11,R[9],E,E,2,[[["self"]],[R[51]]]],[11,R[10],E,E,2,[[["self"]],[T]]],[11,R[11],E,E,2,[[],[R[6]]]],[11,"eq",R[4],E,0,[[[R[1]],["self"]],["bool"]]],[11,"ne",E,E,0,[[[R[1]],["self"]],["bool"]]],[11,"clone",E,E,0,[[["self"]],[R[1]]]],[11,"next",R[12],E,2,[[["self"]],[R[3]]]],[11,"fmt",R[4],E,0,[[[R[13]],["self"]],[R[6]]]],[11,"fmt",E,E,0,[[[R[13]],["self"]],[R[6]]]],[11,R[53],E,E,0,[[["str"]],[R[6]]]]],"p":[[3,R[55]],[3,R[14]],[3,R[15]]]};
initSearch(searchIndex);addSearchOptions(searchIndex);